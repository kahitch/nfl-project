import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { tap, max } from 'rxjs/operators';
import * as parser from 'fast-xml-parser';
import { Observable } from 'rxjs';
@Component({
  selector: 'app-nfl',
  templateUrl: './nfl.component.html',
  styleUrls: ['./nfl.component.css']
})
export class NflComponent implements OnInit {

  seasonData: WeekGames[];
  gameData: Game[];
  weeks: number[];
  constructor(private client: HttpClient) {
    this.seasonData = [];
    this.gameData = [];
    this.weeks = [];
    this.initWeeks();
  }


  ngOnInit() {
    this.setWeek(1);
  }

  private initWeeks() {
    for (let i = 1; i <= 17; i++) {
      this.weeks.push(i);
    }
  }

  setWeek(week: number): Observable<WeekGames>{
    return this.client.get(`http://www.nfl.com/ajax/scorestrip?season=2019&seasonType=REG&week=${week}`, {
      responseType: 'text'
    })
      .pipe(
        tap(r => {
          this.seasonData.push(parser.parse(r, {
            ignoreAttributes: false,
            parseAttributeValue: true,
            attributeNamePrefix: ''
          }).ss.gms);
        })
      ).subscribe();
  }

  winner(g: Game): string {
    if (g.hs === g.vs) {
      return 'tie';
    } else if (g.hs > g.vs) {
      return g.hnn;
    } else {
      return g.vnn;
    }
  }

  gameDate(g: Game): string {
    return g.eid.toString().slice(4, 6) + '/' + g.eid.toString().slice(6, 8);
  }

  tieBreakTotal(): number {
    if (!Array.isArray(this.gameData) || this.gameData.length) {
      const clone = this.gameData.slice(0);

      clone.sort((x: Game, y: Game): number => {
        if (x.eid === y.eid) {
          return 0;
        } else if (x.eid < y.eid) {
          return 1;
        } else {
          return -1;
        }
      });

      const lastGame = clone.slice(0, 1)[0];
      return lastGame.hs + lastGame.vs;
    }
  }
}

// Generated by https://quicktype.io

export interface WeekGames {
  gd: number;
  w: number;
  y: number;
  t: string;
  games: Game[];
}
export interface Game {
  eid: number;
  gsis: number;
  d: string;
  t: string;
  q: string;
  k: string;
  h: string;
  hnn: string;
  hs: number;
  v: string;
  vnn: string;
  vs: number;
  p: string;
  rz: string;
  ga: string;
  gt: string;
}

